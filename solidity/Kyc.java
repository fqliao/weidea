package MCC;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.abi.datatypes.generated.Uint8;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class Kyc extends Contract {
    private static String BINARY = "60606040526000600055341561001157fe5b5b610f4e806100216000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a2f9eac614610067578063adb043b01461034e578063bff9082114610374578063c1733f6814610455578063d0461ba514610536575bfe5b341561006f57fe5b61008560048080359060200190919050506106c0565b6040518080602001806020018060200180602001806020018760ff1660ff16815260200186810386528c81815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561012a5780601f106100ff5761010080835404028352916020019161012a565b820191906000526020600020905b81548152906001019060200180831161010d57829003601f168201915b505086810385528b8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b505086810384528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102305780601f1061020557610100808354040283529160200191610230565b820191906000526020600020905b81548152906001019060200180831161021357829003601f168201915b50508681038352898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102b35780601f10610288576101008083540402835291602001916102b3565b820191906000526020600020905b81548152906001019060200180831161029657829003601f168201915b50508681038252888181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b50509b50505050505050505050505060405180910390f35b341561035657fe5b61035e610714565b6040518082815260200191505060405180910390f35b341561037c57fe5b6103cc600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061071a565b604051808060200182810382528381815181526020019150805190602001908083836000831461041b575b80518252602083111561041b576020820191506020810190506020830392506103f7565b505050905090810190601f1680156104475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045d57fe5b6104ad600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061091a565b60405180806020018281038252838181518152602001915080519060200190808383600083146104fc575b8051825260208311156104fc576020820191506020810190506020830392506104d8565b505050905090810190601f1680156105285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053e57fe5b6106a6600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff16906020019091905050610b1a565b604051808215151515815260200191505060405180910390f35b6001818154811015156106cf57fe5b906000526020600020906006020160005b91509050806000019080600101908060020190806003019080600401908060050160009054906101000a900460ff16905086565b60005481565b610722610d6b565b6000600090505b6000548110156109005760018181548110151561074257fe5b906000526020600020906006020160005b5060000160405180828054600181600116156101000203166002900480156107b25780601f106107905761010080835404028352918201916107b2565b820191906000526020600020905b81548152906001019060200180831161079e575b5050915050604051809103902060001916836040518082805190602001908083835b602083106107f757805182526020820191506020810190506020830392506107d4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156108f25760018181548110151561083d57fe5b906000526020600020906006020160005b506001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108e65780601f106108bb576101008083540402835291602001916108e6565b820191906000526020600020905b8154815290600101906020018083116108c957829003601f168201915b50505050509150610914565b5b8080600101915050610729565b602060405190810160405280600081525091505b50919050565b610922610d6b565b6000600090505b600054811015610b005760018181548110151561094257fe5b906000526020600020906006020160005b5060000160405180828054600181600116156101000203166002900480156109b25780601f106109905761010080835404028352918201916109b2565b820191906000526020600020905b81548152906001019060200180831161099e575b5050915050604051809103902060001916836040518082805190602001908083835b602083106109f757805182526020820191506020810190506020830392506109d4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610af257600181815481101515610a3d57fe5b906000526020600020906006020160005b506004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b50505050509150610b14565b5b8080600101915050610929565b602060405190810160405280600081525091505b50919050565b60006000600090505b600054811015610c3f57600181815481101515610b3c57fe5b906000526020600020906006020160005b506000016040518082805460018160011615610100020316600290048015610bac5780601f10610b8a576101008083540402835291820191610bac565b820191906000526020600020905b815481529060010190602001808311610b98575b5050915050604051809103902060001916886040518082805190602001908083835b60208310610bf15780518252602082019150602081019050602083039250610bce565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610c315760009150610d60565b5b8080600101915050610b23565b60018054806001018281610c539190610d7f565b916000526020600020906006020160005b60c0604051908101604052808c81526020018b81526020018a81526020018981526020018881526020018760ff1681525090919091506000820151816000019080519060200190610cb6929190610db1565b506020820151816001019080519060200190610cd3929190610db1565b506040820151816002019080519060200190610cf0929190610db1565b506060820151816003019080519060200190610d0d929190610db1565b506080820151816004019080519060200190610d2a929190610db1565b5060a08201518160050160006101000a81548160ff021916908360ff160217905550505050600160005401600081905550600191505b509695505050505050565b602060405190810160405280600081525090565b815481835581811511610dac57600602816006028360005260206000209182019101610dab9190610e31565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610df257805160ff1916838001178555610e20565b82800160010185558215610e20579182015b82811115610e1f578251825591602001919060010190610e04565b5b509050610e2d9190610eb5565b5090565b610eb291905b80821115610eae576000600082016000610e519190610eda565b600182016000610e619190610eda565b600282016000610e719190610eda565b600382016000610e819190610eda565b600482016000610e919190610eda565b6005820160006101000a81549060ff021916905550600601610e37565b5090565b90565b610ed791905b80821115610ed3576000816000905550600101610ebb565b5090565b90565b50805460018160011615610100020316600290046000825580601f10610f005750610f1f565b601f016020900490600052602060002090810190610f1e9190610eb5565b5b505600a165627a7a723058202b3c7966b999b80e186bf39b93bedb219c6041cec52b722fb66ccf3e508582d20029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"}],\"name\":\"getPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]";

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public Future<List<Type>> persons(Uint256 param0) {
        Function function = new Function("persons", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> numPerson() {
        Function function = new Function("numPerson", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPublicKey(Utf8String idCard) {
        Function function = new Function("getPublicKey", 
                Arrays.<Type>asList(idCard), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getToken(Utf8String idCard) {
        Function function = new Function("getToken", 
                Arrays.<Type>asList(idCard), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> register(Utf8String idCard, Utf8String publicKey, Utf8String userName, Utf8String phone, Utf8String token, Uint8 sex) {
        Function function = new Function("register", Arrays.<Type>asList(idCard, publicKey, userName, phone, token, sex), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void register(Utf8String idCard, Utf8String publicKey, Utf8String userName, Utf8String phone, Utf8String token, Uint8 sex, TransactionSucCallback callback) {
        Function function = new Function("register", Arrays.<Type>asList(idCard, publicKey, userName, phone, token, sex), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public static Future<Kyc> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Kyc> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Kyc load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static Kyc load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }
}
