package cn.webank.weidea.mcc;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.abi.datatypes.generated.Uint8;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j
 * command line tools</a>, or
 * {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>
 * Generated with web3j version none.
 */
public final class Kyc extends Contract {
	private static String BINARY = "60606040526000600055341561001157fe5b5b611257806100216000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063343097ea14610078578063a2f9eac614610158578063adb043b01461043f578063bff9082114610465578063c1733f6814610546578063d0461ba514610627575bfe5b341561008057fe5b610156600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506107b1565b005b341561016057fe5b6101766004808035906020019091905050610949565b6040518080602001806020018060200180602001806020018760ff1660ff16815260200186810386528c81815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561021b5780601f106101f05761010080835404028352916020019161021b565b820191906000526020600020905b8154815290600101906020018083116101fe57829003601f168201915b505086810385528b81815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561029e5780601f106102735761010080835404028352916020019161029e565b820191906000526020600020905b81548152906001019060200180831161028157829003601f168201915b505086810384528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103215780601f106102f657610100808354040283529160200191610321565b820191906000526020600020905b81548152906001019060200180831161030457829003601f168201915b50508681038352898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b50508681038252888181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156104275780601f106103fc57610100808354040283529160200191610427565b820191906000526020600020905b81548152906001019060200180831161040a57829003601f168201915b50509b50505050505050505050505060405180910390f35b341561044757fe5b61044f61099d565b6040518082815260200191505060405180910390f35b341561046d57fe5b6104bd600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506109a3565b604051808060200182810382528381815181526020019150805190602001908083836000831461050c575b80518252602083111561050c576020820191506020810190506020830392506104e8565b505050905090810190601f1680156105385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054e57fe5b61059e600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ba3565b60405180806020018281038252838181518152602001915080519060200190808383600083146105ed575b8051825260208311156105ed576020820191506020810190506020830392506105c9565b505050905090810190601f1680156106195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561062f57fe5b610797600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff16906020019091905050610da3565b604051808215151515815260200191505060405180910390f35b6000600090505b600054811015610942576001818154811015156107d157fe5b906000526020600020906006020160005b5060000160405180828054600181600116156101000203166002900480156108415780601f1061081f576101008083540402835291820191610841565b820191906000526020600020905b81548152906001019060200180831161082d575b5050915050604051809103902060001916846040518082805190602001908083835b602083106108865780518252602082019150602081019050602083039250610863565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561093457826001828154811015156108cd57fe5b906000526020600020906006020160005b5060040190805190602001906108f5929190610ff4565b508160018281548110151561090657fe5b906000526020600020906006020160005b50600301908051906020019061092e929190610ff4565b50610943565b5b80806001019150506107b8565b5b50505050565b60018181548110151561095857fe5b906000526020600020906006020160005b91509050806000019080600101908060020190806003019080600401908060050160009054906101000a900460ff16905086565b60005481565b6109ab611074565b6000600090505b600054811015610b89576001818154811015156109cb57fe5b906000526020600020906006020160005b506000016040518082805460018160011615610100020316600290048015610a3b5780601f10610a19576101008083540402835291820191610a3b565b820191906000526020600020905b815481529060010190602001808311610a27575b5050915050604051809103902060001916836040518082805190602001908083835b60208310610a805780518252602082019150602081019050602083039250610a5d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610b7b57600181815481101515610ac657fe5b906000526020600020906006020160005b506001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b50505050509150610b9d565b5b80806001019150506109b2565b602060405190810160405280600081525091505b50919050565b610bab611074565b6000600090505b600054811015610d8957600181815481101515610bcb57fe5b906000526020600020906006020160005b506000016040518082805460018160011615610100020316600290048015610c3b5780601f10610c19576101008083540402835291820191610c3b565b820191906000526020600020905b815481529060010190602001808311610c27575b5050915050604051809103902060001916836040518082805190602001908083835b60208310610c805780518252602082019150602081019050602083039250610c5d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610d7b57600181815481101515610cc657fe5b906000526020600020906006020160005b506004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d6f5780601f10610d4457610100808354040283529160200191610d6f565b820191906000526020600020905b815481529060010190602001808311610d5257829003601f168201915b50505050509150610d9d565b5b8080600101915050610bb2565b602060405190810160405280600081525091505b50919050565b60006000600090505b600054811015610ec857600181815481101515610dc557fe5b906000526020600020906006020160005b506000016040518082805460018160011615610100020316600290048015610e355780601f10610e13576101008083540402835291820191610e35565b820191906000526020600020905b815481529060010190602001808311610e21575b5050915050604051809103902060001916886040518082805190602001908083835b60208310610e7a5780518252602082019150602081019050602083039250610e57565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610eba5760009150610fe9565b5b8080600101915050610dac565b60018054806001018281610edc9190611088565b916000526020600020906006020160005b60c0604051908101604052808c81526020018b81526020018a81526020018981526020018881526020018760ff1681525090919091506000820151816000019080519060200190610f3f9291906110ba565b506020820151816001019080519060200190610f5c9291906110ba565b506040820151816002019080519060200190610f799291906110ba565b506060820151816003019080519060200190610f969291906110ba565b506080820151816004019080519060200190610fb39291906110ba565b5060a08201518160050160006101000a81548160ff021916908360ff160217905550505050600160005401600081905550600191505b509695505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061103557805160ff1916838001178555611063565b82800160010185558215611063579182015b82811115611062578251825591602001919060010190611047565b5b509050611070919061113a565b5090565b602060405190810160405280600081525090565b8154818355818115116110b5576006028160060283600052602060002091820191016110b4919061115f565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110fb57805160ff1916838001178555611129565b82800160010185558215611129579182015b8281111561112857825182559160200191906001019061110d565b5b509050611136919061113a565b5090565b61115c91905b80821115611158576000816000905550600101611140565b5090565b90565b6111e091905b808211156111dc57600060008201600061117f91906111e3565b60018201600061118f91906111e3565b60028201600061119f91906111e3565b6003820160006111af91906111e3565b6004820160006111bf91906111e3565b6005820160006101000a81549060ff021916905550600601611165565b5090565b90565b50805460018160011615610100020316600290046000825580601f106112095750611228565b601f016020900490600052602060002090810190611227919061113a565b5b505600a165627a7a7230582055ce1ef3b25d6ab40d61d0b6ff8502041cf02883ee36d0e278598ab48e0387ca0029";

	public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_idCard\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"updateTokenAndPhone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"}],\"name\":\"getPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idCard\",\"type\":\"string\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idCard\",\"type\":\"string\"},{\"name\":\"_publicKey\",\"type\":\"string\"},{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_sex\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]";

	private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit,
			Boolean isInitByName) {
		super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
	}

	private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit, Boolean isInitByName) {
		super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
	}

	private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
	}

	private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
	}

	public Future<TransactionReceipt> updateTokenAndPhone(Utf8String _idCard, Utf8String _token, Utf8String _phone) {
		Function function = new Function("updateTokenAndPhone", Arrays.<Type>asList(_idCard, _token, _phone),
				Collections.<TypeReference<?>>emptyList());
		return executeTransactionAsync(function);
	}

	public void updateTokenAndPhone(Utf8String _idCard, Utf8String _token, Utf8String _phone,
			TransactionSucCallback callback) {
		Function function = new Function("updateTokenAndPhone", Arrays.<Type>asList(_idCard, _token, _phone),
				Collections.<TypeReference<?>>emptyList());
		executeTransactionAsync(function, callback);
	}

	public Future<List<Type>> persons(Uint256 param0) {
		Function function = new Function("persons", Arrays.<Type>asList(param0),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Uint8>() {
				}));
		return executeCallMultipleValueReturnAsync(function);
	}

	public Future<Uint256> numPerson() {
		Function function = new Function("numPerson", Arrays.<Type>asList(),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeCallSingleValueReturnAsync(function);
	}

	public Future<Utf8String> getPublicKey(Utf8String idCard) {
		Function function = new Function("getPublicKey", Arrays.<Type>asList(idCard),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}));
		return executeCallSingleValueReturnAsync(function);
	}

	public Future<Utf8String> getToken(Utf8String _idCard) {
		Function function = new Function("getToken", Arrays.<Type>asList(_idCard),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}));
		return executeCallSingleValueReturnAsync(function);
	}

	public Future<TransactionReceipt> register(Utf8String _idCard, Utf8String _publicKey, Utf8String _userName,
			Utf8String _phone, Utf8String _token, Uint8 _sex) {
		Function function = new Function("register",
				Arrays.<Type>asList(_idCard, _publicKey, _userName, _phone, _token, _sex),
				Collections.<TypeReference<?>>emptyList());
		return executeTransactionAsync(function);
	}

	public void register(Utf8String _idCard, Utf8String _publicKey, Utf8String _userName, Utf8String _phone,
			Utf8String _token, Uint8 _sex, TransactionSucCallback callback) {
		Function function = new Function("register",
				Arrays.<Type>asList(_idCard, _publicKey, _userName, _phone, _token, _sex),
				Collections.<TypeReference<?>>emptyList());
		executeTransactionAsync(function, callback);
	}

	public static Future<Kyc> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit,
			BigInteger initialWeiValue) {
		return deployAsync(Kyc.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
	}

	public static Future<Kyc> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit, BigInteger initialWeiValue) {
		return deployAsync(Kyc.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
	}

	public static Kyc load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return new Kyc(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
	}

	public static Kyc load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
			BigInteger gasPrice, BigInteger gasLimit) {
		return new Kyc(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
	}

	public static Kyc loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return new Kyc(contractName, web3j, credentials, gasPrice, gasLimit, true);
	}

	public static Kyc loadByName(String contractName, Web3j web3j, TransactionManager transactionManager,
			BigInteger gasPrice, BigInteger gasLimit) {
		return new Kyc(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
	}
}
