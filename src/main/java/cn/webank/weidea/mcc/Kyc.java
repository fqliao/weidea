package cn.webank.weidea.mcc;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.abi.datatypes.generated.Uint8;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class Kyc extends Contract {
    private static String BINARY = "60606040526000600055341561001157fe5b5b610b5d806100216000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063693ec85e1461005c578063a2f9eac61461013d578063adb043b01461039b578063e4b5ad39146103c1575bfe5b341561006457fe5b6100b4600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610508565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61015b6004808035906020019091905050610708565b60405180806020018060200180602001806020018660ff1660ff16815260200185810385528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b505085810384528981815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561027f5780601f106102545761010080835404028352916020019161027f565b820191906000526020600020905b81548152906001019060200180831161026257829003601f168201915b50508581038352888181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103025780601f106102d757610100808354040283529160200191610302565b820191906000526020600020905b8154815290600101906020018083116102e557829003601f168201915b50508581038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103855780601f1061035a57610100808354040283529160200191610385565b820191906000526020600020905b81548152906001019060200180831161036857829003601f168201915b5050995050505050505050505060405180910390f35b34156103a357fe5b6103ab610757565b6040518082815260200191505060405180910390f35b34156103c957fe5b6104ee600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff1690602001909190505061075d565b604051808215151515815260200191505060405180910390f35b61051061098a565b6000600090505b6000548110156106ee5760018181548110151561053057fe5b906000526020600020906005020160005b5060000160405180828054600181600116156101000203166002900480156105a05780601f1061057e5761010080835404028352918201916105a0565b820191906000526020600020905b81548152906001019060200180831161058c575b5050915050604051809103902060001916836040518082805190602001908083835b602083106105e557805182526020820191506020810190506020830392506105c2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156106e05760018181548110151561062b57fe5b906000526020600020906005020160005b506001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d45780601f106106a9576101008083540402835291602001916106d4565b820191906000526020600020905b8154815290600101906020018083116106b757829003601f168201915b50505050509150610702565b5b8080600101915050610517565b602060405190810160405280600081525091505b50919050565b60018181548110151561071757fe5b906000526020600020906005020160005b9150905080600001908060010190806002019080600301908060040160009054906101000a900460ff16905085565b60005481565b60006000600090505b6000548110156108825760018181548110151561077f57fe5b906000526020600020906005020160005b5060000160405180828054600181600116156101000203166002900480156107ef5780601f106107cd5761010080835404028352918201916107ef565b820191906000526020600020905b8154815290600101906020018083116107db575b5050915050604051809103902060001916876040518082805190602001908083835b602083106108345780518252602082019150602081019050602083039250610811565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156108745760009150610980565b5b8080600101915050610766565b60018054806001018281610896919061099e565b916000526020600020906005020160005b60a0604051908101604052808b81526020018a81526020018981526020018881526020018760ff16815250909190915060008201518160000190805190602001906108f39291906109d0565b5060208201518160010190805190602001906109109291906109d0565b50604082015181600201908051906020019061092d9291906109d0565b50606082015181600301908051906020019061094a9291906109d0565b5060808201518160040160006101000a81548160ff021916908360ff160217905550505050600160005401600081905550600191505b5095945050505050565b602060405190810160405280600081525090565b8154818355818115116109cb576005028160050283600052602060002091820191016109ca9190610a50565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a1157805160ff1916838001178555610a3f565b82800160010185558215610a3f579182015b82811115610a3e578251825591602001919060010190610a23565b5b509050610a4c9190610ac4565b5090565b610ac191905b80821115610abd576000600082016000610a709190610ae9565b600182016000610a809190610ae9565b600282016000610a909190610ae9565b600382016000610aa09190610ae9565b6004820160006101000a81549060ff021916905550600501610a56565b5090565b90565b610ae691905b80821115610ae2576000816000905550600101610aca565b5090565b90565b50805460018160011615610100020316600290046000825580601f10610b0f5750610b2e565b601f016020900490600052602060002090810190610b2d9190610ac4565b5b505600a165627a7a72305820f1ed9b9e480ce10e9ea67a0cbf935debfeaca843b82390ec5a16cbb1719d00900029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]";

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public Future<Utf8String> get(Utf8String idCard) {
        Function function = new Function("get", 
                Arrays.<Type>asList(idCard), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> persons(Uint256 param0) {
        Function function = new Function("persons", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> numPerson() {
        Function function = new Function("numPerson", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> register(Utf8String idCard, Utf8String userName, Utf8String phone, Utf8String token, Uint8 sex) {
        Function function = new Function("register", Arrays.<Type>asList(idCard, userName, phone, token, sex), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void register(Utf8String idCard, Utf8String userName, Utf8String phone, Utf8String token, Uint8 sex, TransactionSucCallback callback) {
        Function function = new Function("register", Arrays.<Type>asList(idCard, userName, phone, token, sex), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public static Future<Kyc> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Kyc> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Kyc load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static Kyc load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }
}
