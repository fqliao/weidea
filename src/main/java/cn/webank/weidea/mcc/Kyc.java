package cn.webank.weidea.mcc;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.abi.datatypes.generated.Uint8;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class Kyc extends Contract {
    private static String BINARY = "60606040526000600055341561001157fe5b5b610de3806100216000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638fb5867f14610067578063a2f9eac614610104578063adb043b014610362578063bff9082114610388578063e4b5ad3914610469575bfe5b341561006f57fe5b610102600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506105b0565b005b341561010c57fe5b610122600480803590602001909190505061070e565b60405180806020018060200180602001806020018660ff1660ff16815260200185810385528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101c35780601f10610198576101008083540402835291602001916101c3565b820191906000526020600020905b8154815290600101906020018083116101a657829003601f168201915b50508581038452898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b50508581038352888181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b505085810382528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b5050995050505050505050505060405180910390f35b341561036a57fe5b61037261075d565b6040518082815260200191505060405180910390f35b341561039057fe5b6103e0600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610763565b604051808060200182810382528381815181526020019150805190602001908083836000831461042f575b80518252602083111561042f5760208201915060208101905060208303925061040b565b505050905090810190601f16801561045b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047157fe5b610596600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff16906020019091905050610963565b604051808215151515815260200191505060405180910390f35b6000600090505b600054811015610708576001818154811015156105d057fe5b906000526020600020906005020160005b5060000160405180828054600181600116156101000203166002900480156106405780601f1061061e576101008083540402835291820191610640565b820191906000526020600020905b81548152906001019060200180831161062c575b5050915050604051809103902060001916836040518082805190602001908083835b602083106106855780518252602082019150602081019050602083039250610662565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156106fa57816001828154811015156106cc57fe5b906000526020600020906005020160005b5060030190805190602001906106f4929190610b90565b50610709565b5b80806001019150506105b7565b5b505050565b60018181548110151561071d57fe5b906000526020600020906005020160005b9150905080600001908060010190806002019080600301908060040160009054906101000a900460ff16905085565b60005481565b61076b610c10565b6000600090505b6000548110156109495760018181548110151561078b57fe5b906000526020600020906005020160005b5060000160405180828054600181600116156101000203166002900480156107fb5780601f106107d95761010080835404028352918201916107fb565b820191906000526020600020905b8154815290600101906020018083116107e7575b5050915050604051809103902060001916836040518082805190602001908083835b60208310610840578051825260208201915060208101905060208303925061081d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561093b5760018181548110151561088657fe5b906000526020600020906005020160005b506001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b5050505050915061095d565b5b8080600101915050610772565b602060405190810160405280600081525091505b50919050565b60006000600090505b600054811015610a885760018181548110151561098557fe5b906000526020600020906005020160005b5060000160405180828054600181600116156101000203166002900480156109f55780601f106109d35761010080835404028352918201916109f5565b820191906000526020600020905b8154815290600101906020018083116109e1575b5050915050604051809103902060001916876040518082805190602001908083835b60208310610a3a5780518252602082019150602081019050602083039250610a17565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610a7a5760009150610b86565b5b808060010191505061096c565b60018054806001018281610a9c9190610c24565b916000526020600020906005020160005b60a0604051908101604052808b81526020018a81526020018981526020018881526020018760ff1681525090919091506000820151816000019080519060200190610af9929190610c56565b506020820151816001019080519060200190610b16929190610c56565b506040820151816002019080519060200190610b33929190610c56565b506060820151816003019080519060200190610b50929190610c56565b5060808201518160040160006101000a81548160ff021916908360ff160217905550505050600160005401600081905550600191505b5095945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bd157805160ff1916838001178555610bff565b82800160010185558215610bff579182015b82811115610bfe578251825591602001919060010190610be3565b5b509050610c0c9190610cd6565b5090565b602060405190810160405280600081525090565b815481835581811511610c5157600502816005028360005260206000209182019101610c509190610cfb565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c9757805160ff1916838001178555610cc5565b82800160010185558215610cc5579182015b82811115610cc4578251825591602001919060010190610ca9565b5b509050610cd29190610cd6565b5090565b610cf891905b80821115610cf4576000816000905550600101610cdc565b5090565b90565b610d6c91905b80821115610d68576000600082016000610d1b9190610d6f565b600182016000610d2b9190610d6f565b600282016000610d3b9190610d6f565b600382016000610d4b9190610d6f565b6004820160006101000a81549060ff021916905550600501610d01565b5090565b90565b50805460018160011615610100020316600290046000825580601f10610d955750610db4565b601f016020900490600052602060002090810190610db39190610cd6565b5b505600a165627a7a72305820a05557fa9aa4b8f27c18a08491f45c6db7620a6010655d0b42aa36b7f02e88250029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_idCard\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"updatePhone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"idCard\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idCard\",\"type\":\"string\"}],\"name\":\"getPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idCard\",\"type\":\"string\"},{\"name\":\"_publicKey\",\"type\":\"string\"},{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"},{\"name\":\"_sex\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]";

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
    }

    private Kyc(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    private Kyc(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public Future<TransactionReceipt> updatePhone(Utf8String _idCard, Utf8String _phone) {
        Function function = new Function("updatePhone", Arrays.<Type>asList(_idCard, _phone), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void updatePhone(Utf8String _idCard, Utf8String _phone, TransactionSucCallback callback) {
        Function function = new Function("updatePhone", Arrays.<Type>asList(_idCard, _phone), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<List<Type>> persons(Uint256 param0) {
        Function function = new Function("persons", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> numPerson() {
        Function function = new Function("numPerson", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getPublicKey(Utf8String idCard) {
        Function function = new Function("getPublicKey", 
                Arrays.<Type>asList(idCard), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> register(Utf8String _idCard, Utf8String _publicKey, Utf8String _userName, Utf8String _phone, Uint8 _sex) {
        Function function = new Function("register", Arrays.<Type>asList(_idCard, _publicKey, _userName, _phone, _sex), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void register(Utf8String _idCard, Utf8String _publicKey, Utf8String _userName, Utf8String _phone, Uint8 _sex, TransactionSucCallback callback) {
        Function function = new Function("register", Arrays.<Type>asList(_idCard, _publicKey, _userName, _phone, _sex), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public static Future<Kyc> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Kyc> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Kyc.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Kyc load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static Kyc load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static Kyc loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kyc(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }
}
